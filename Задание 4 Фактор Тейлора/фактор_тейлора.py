# -*- coding: utf-8 -*-
"""Фактор Тейлора.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12qMn6Ym4yXks2PFnDMVUHsd49brRTldW
"""

import numpy as np
from scipy.optimize import linprog
# from pprint import pprint

def g(ang1, ang2, ang3):
    rot_matrix = np.array([
                [np.cos(ang1)*np.cos(ang3)-np.sin(ang1)*np.sin(ang3)*np.cos(ang2), np.cos(ang3)*np.sin(ang1)+np.sin(ang3)*np.cos(ang1)*np.cos(ang2), np.sin(ang3)*np.sin(ang2)],
                [-np.cos(ang1)*np.sin(ang3)-np.sin(ang1)*np.cos(ang3)*np.cos(ang2), -np.sin(ang1)*np.sin(ang3)+np.cos(ang1)*np.cos(ang3)*np.cos(ang2), np.cos(ang3)*np.sin(ang2)],
                [np.sin(ang1)*np.sin(ang2), -np.cos(ang1)*np.sin(ang2), np.cos(ang2)]])
    return rot_matrix

deg = np.pi/180
# dfdir = np.array([[1, 0, 1], 
#                   [1, 0, 1], 
#                   [1, 1, 0], 
#                   [1, 1, 0], 
#                   [0, 1, 1], 
#                   [0, 1, 1], 
#                   [1, -1, 0], 
#                   [1, -1, 0], 
#                   [0, -1, 1], 
#                   [0, -1, 1], 
#                   [-1, 0, 1], 
#                   [-1, 0, 1]])

# dfpln = np.array([[-1, 1, 1], 
#                   [-1, -1, 1], 
#                   [1, -1, 1], 
#                   [-1, 1, 1], 
#                   [-1, -1, 1], 
#                   [1, -1, 1], 
#                   [-1, -1, 1], 
#                   [1, 1, 1], 
#                   [-1, 1, 1], 
#                   [1, 1, 1], 
#                   [1, -1, 1], 
#                   [1, 1, 1]])

dfpln = np.array([[1, 0, 1],
                  [1, 1, 0],
                  [0, -1, 1],
                  [1, 0, 1],
                  [0, 1, 1],
                  [1, -1, 0],
                  [1, 1, 0],
                  [0, 1, 1],
                  [-1, 0, 1],
                  [1, -1, 0],
                  [0, -1, 1],
                  [-1, 0, 1]])

dfdir = np.array([[-1, 1, 1],
                  [-1, 1, 1],
                  [-1, 1, 1],
                  [-1, -1, 1],
                  [-1, -1, 1],
                  [-1, -1, 1],
                  [1, -1, 1],
                  [1, -1, 1],
                  [1, -1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1]])

# dfdir = np.array([[1, 0, 1],
#                   [1, 0, 1],
#                   [1, 1, 0],
#                   [1, 1, 0],
#                   [0, 1, 1],
#                   [0, 1, 1],
#                   [1, -1, 0],
#                   [1, -1, 0],
#                   [0, -1, 1],
#                   [0, -1, 1],
#                   [-1, 0, 1],
#                   [-1, 0, 1]])

# dfpln = np.array([[-1, 1, 1],
#                   [-1, -1, 1],
#                   [1, -1, 1],
#                   [-1, 1, 1],
#                   [-1, -1, 1],
#                   [1, -1, 1],
#                   [-1, -1, 1],
#                   [1, 1, 1],
#                   [-1, 1, 1],
#                   [1, 1, 1],
#                   [1, -1, 1],
#                   [1, 1, 1]])

# print(np.sum(dfpln * dfdir, axis=1))

G = np.zeros((len(dfpln), 3, 3))
for k in range(len(dfpln)):
    for i in range(3):
        for j in range(3):
            G[k, i, j] = 0.5 * (dfpln[k, i] * dfdir[k, j] + dfpln[k, j] * dfdir[k, i])

e11 = 1
es = np.array([[e11, 0, 0], 
               [0, 0, 0], 
               [0, 0, -e11]])

nn = len(dfpln)
tcrit = np.ones(nn).T
lb = -e11 * np.ones(nn)
ub = e11 * np.ones(nn)

i = 0
shears = np.zeros((nn, 100))
for Phi in range(0, 91, 10):
    for phi1 in range(0, 91, 10):
        phi2 = 0*deg
        ec = np.dot(np.dot(g(phi1*deg, Phi*deg, phi2*deg), es), g(phi1*deg, Phi*deg, phi2*deg).T)
        A = np.array([G[:,0,0].T, 
                      G[:,1,1].T, 
                      G[:,0,1].T, 
                      G[:,0,2].T, 
                      G[:,1,2].T])
        
        b = [ec[0,0], ec[1,1], ec[0,1], ec[0,2], ec[1,2]]
        c = tcrit
        
        shears[:, i] = linprog(c, A_eq=A, b_eq=b, bounds=list(zip(lb, ub)), method='highs').x
        shears[shears==-e11] = 0
        shears[shears==e11] = 0
        i += 1
# pprint(shears)

m_cryst = np.sum(np.abs(shears), axis=0) / e11
M = np.mean(m_cryst)
# pprint(m_cryst)

print('Фактор Тейлора для ГЦК:', M)